Alphabet a b c d e f g h i I:i k l m n o p q r s t u v w x y z %-:0 ;

Sets
    V = a e i o u ;
    C = b c d f g h k l m n p q r s t v w x y z ;

Definitions
    Cons = [ C | q u ] ;

Rules
"-a drop before -o and -e"
a:0 <=> _ %-: [ o | e ] ;

"-e theme vowel before -r"
%-:e <=> Cons _ r ;

"Short -i to -e before -r"
I:e <=> _ %-: r ;

"Loss of -I before present passive infinitive ending"
I:0 <=> _ %-: i .#. ;

"-i theme vowel between consonant and s, t and m"
%-:i <=> Cons _ [ s | t | m ] ;

"-u theme vowel between consonant and n"
%-:u <=> [ Cons | ~r :i ] _ n ;

! This rule has to be refined. First of all, it's possible for verbs ending in
! -e to have perfect stem -ev. Second, it's a bit more complicated than what
! I've currently implemented, see Ernout pp. 209-212.
! XXX: [i:|e:] should be replacable by `?'?
"Weird perfects, -v loss"
v:0 => a _ %-: [ i: | e: ] [ s | r ] ;
       i _ %-: [ i: | e: ] ;
       e _ %-: [ i: | e: ] ; ! XXX: More constraints?

! TODO: This rule has to be extended to remove all illegal forms.
"Stop -v syncope when it would cause confusion with other forms"
v:0 /<= a _ %-: ? r e .#. ;

"Weird perfects, -i loss"
i:0 <=> a v:0 %-: _ ;
        i v:0 %-: _ s ;

"Weird perfects, -e loss"
e:0 <=> a v:0 %-: _ ;
